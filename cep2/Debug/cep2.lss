
cep2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e7  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d5  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000331  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	f4 00       	.word	0x00f4	; ????
  72:	dc 00       	.word	0x00dc	; ????
  74:	de 00       	.word	0x00de	; ????
  76:	e0 00       	.word	0x00e0	; ????
  78:	e2 00       	.word	0x00e2	; ????
  7a:	e4 00       	.word	0x00e4	; ????
  7c:	e6 00       	.word	0x00e6	; ????
  7e:	e8 00       	.word	0x00e8	; ????
  80:	ea 00       	.word	0x00ea	; ????
  82:	da 00       	.word	0x00da	; ????
  84:	da 00       	.word	0x00da	; ????
  86:	da 00       	.word	0x00da	; ????
  88:	da 00       	.word	0x00da	; ????
  8a:	da 00       	.word	0x00da	; ????
  8c:	da 00       	.word	0x00da	; ????
  8e:	da 00       	.word	0x00da	; ????
  90:	ec 00       	.word	0x00ec	; ????
  92:	ee 00       	.word	0x00ee	; ????
  94:	f0 00       	.word	0x00f0	; ????
  96:	f2 00       	.word	0x00f2	; ????

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d4 e0       	ldi	r29, 0x04	; 4
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e1       	ldi	r30, 0x1C	; 28
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
  ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  be:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <initialize_pwm>:
	return 0;
}

void initialize_pwm(void)
{
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21); // Fast PWM mode, Non-inverting mode
  c6:	87 b5       	in	r24, 0x27	; 39
  c8:	88 66       	ori	r24, 0x68	; 104
  ca:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS22);                              // Clock prescaler 64
  cc:	87 b5       	in	r24, 0x27	; 39
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	87 bd       	out	0x27, r24	; 39
	OCR2 = 0xFF;                                       // Set TOP value for 8-bit fast PWM mode
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	82 bd       	out	0x22, r24	; 34
  d6:	08 95       	ret

000000d8 <read_keypad>:
}

char read_keypad(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	60 97       	sbiw	r28, 0x10	; 16
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	char keypad_keys[4][4] = {
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <read_keypad+0x1e>
		{'1', '2', '3', 'A'},
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}};

		for (int col = 0; col < 4; col++)
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	40 c0       	rjmp	.+128    	; 0x184 <read_keypad+0xac>
		{
			PORTA = ~(1 << col); // Enable one column at a time
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	04 2e       	mov	r0, r20
 10a:	02 c0       	rjmp	.+4      	; 0x110 <read_keypad+0x38>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <read_keypad+0x34>
 114:	80 95       	com	r24
 116:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	83 ec       	ldi	r24, 0xC3	; 195
 11a:	99 e0       	ldi	r25, 0x09	; 9
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <read_keypad+0x44>
 120:	00 c0       	rjmp	.+0      	; 0x122 <read_keypad+0x4a>
 122:	00 00       	nop
			_delay_ms(10);       // Wait for a short time for stabilization

			for (int row = 0; row < 4; row++)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	28 c0       	rjmp	.+80     	; 0x17a <read_keypad+0xa2>
			{
				if (!(PINA & (1 << (row + 4)))) // Check if the corresponding row is low
 12a:	89 b3       	in	r24, 0x19	; 25
 12c:	b9 01       	movw	r22, r18
 12e:	6c 5f       	subi	r22, 0xFC	; 252
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	06 2e       	mov	r0, r22
 136:	02 c0       	rjmp	.+4      	; 0x13c <read_keypad+0x64>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <read_keypad+0x60>
 140:	80 fd       	sbrc	r24, 0
 142:	19 c0       	rjmp	.+50     	; 0x176 <read_keypad+0x9e>
				{
					while (!(PINA & (1 << (row + 4)))); // Wait for the key release
 144:	89 b3       	in	r24, 0x19	; 25
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	06 2e       	mov	r0, r22
 14a:	02 c0       	rjmp	.+4      	; 0x150 <read_keypad+0x78>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <read_keypad+0x74>
 154:	80 ff       	sbrs	r24, 0
 156:	f6 cf       	rjmp	.-20     	; 0x144 <read_keypad+0x6c>
					return keypad_keys[row][col];
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	8c 0f       	add	r24, r28
 166:	9d 1f       	adc	r25, r29
 168:	28 0f       	add	r18, r24
 16a:	39 1f       	adc	r19, r25
 16c:	f9 01       	movw	r30, r18
 16e:	e4 0f       	add	r30, r20
 170:	f5 1f       	adc	r31, r21
 172:	80 81       	ld	r24, Z
 174:	0c c0       	rjmp	.+24     	; 0x18e <read_keypad+0xb6>
		for (int col = 0; col < 4; col++)
		{
			PORTA = ~(1 << col); // Enable one column at a time
			_delay_ms(10);       // Wait for a short time for stabilization

			for (int row = 0; row < 4; row++)
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	24 30       	cpi	r18, 0x04	; 4
 17c:	31 05       	cpc	r19, r1
 17e:	ac f2       	brlt	.-86     	; 0x12a <read_keypad+0x52>
		{'1', '2', '3', 'A'},
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}};

		for (int col = 0; col < 4; col++)
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	5f 4f       	sbci	r21, 0xFF	; 255
 184:	44 30       	cpi	r20, 0x04	; 4
 186:	51 05       	cpc	r21, r1
 188:	0c f4       	brge	.+2      	; 0x18c <read_keypad+0xb4>
 18a:	bc cf       	rjmp	.-136    	; 0x104 <read_keypad+0x2c>
					return keypad_keys[row][col];
				}
			}
		}

		return '\0'; // Return null character if no key is pressed
 18c:	80 e0       	ldi	r24, 0x00	; 0
	}
 18e:	60 96       	adiw	r28, 0x10	; 16
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <set_fan_speed>:

	void set_fan_speed(char keypad_input)
	{
		unsigned char pwm_value = 0;

		switch (keypad_input)
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	f1 97       	sbiw	r30, 0x31	; 49
 1a6:	e4 31       	cpi	r30, 0x14	; 20
 1a8:	f1 05       	cpc	r31, r1
 1aa:	20 f4       	brcc	.+8      	; 0x1b4 <set_fan_speed+0x14>
 1ac:	e8 5c       	subi	r30, 0xC8	; 200
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__tablejump2__>
		{
			case '0':
			pwm_value = 0; // Turn off the fan
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	19 c0       	rjmp	.+50     	; 0x1ea <set_fan_speed+0x4a>
			break;
			case '1':
			pwm_value = 25; // Fan speed 25 (10%)
			break;
			case '2':
			pwm_value = 50; // Fan speed 50 (20%)
 1b8:	82 e3       	ldi	r24, 0x32	; 50
			break;
 1ba:	17 c0       	rjmp	.+46     	; 0x1ea <set_fan_speed+0x4a>
			case '3':
			pwm_value = 75; // Fan speed 75 (30%)
 1bc:	8b e4       	ldi	r24, 0x4B	; 75
			break;
 1be:	15 c0       	rjmp	.+42     	; 0x1ea <set_fan_speed+0x4a>
			case '4':
			pwm_value = 100; // Fan speed 100 (40%)
 1c0:	84 e6       	ldi	r24, 0x64	; 100
			break;
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <set_fan_speed+0x4a>
			case '5':
			pwm_value = 125; // Fan speed 125 (50%)
 1c4:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <set_fan_speed+0x4a>
			case '6':
			pwm_value = 150; // Fan speed 150 (60%)
 1c8:	86 e9       	ldi	r24, 0x96	; 150
			break;
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <set_fan_speed+0x4a>
			case '7':
			pwm_value = 175; // Fan speed 175 (70%)
 1cc:	8f ea       	ldi	r24, 0xAF	; 175
			break;
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <set_fan_speed+0x4a>
			case '8':
			pwm_value = 200; // Fan speed 200 (80%)
 1d0:	88 ec       	ldi	r24, 0xC8	; 200
			break;
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <set_fan_speed+0x4a>
			case '9':
			pwm_value = 225; // Fan speed 225 (90%)
 1d4:	81 ee       	ldi	r24, 0xE1	; 225
			break;
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <set_fan_speed+0x4a>
			case 'A':
			pwm_value = 255; // Fan speed 255 (100%)
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
			break;
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <set_fan_speed+0x4a>
			case 'B':
			pwm_value = 150; // Custom speed 150 (60%)
 1dc:	86 e9       	ldi	r24, 0x96	; 150
			break;
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <set_fan_speed+0x4a>
			case 'C':
			pwm_value = 80; // Custom speed 80 (32%)
 1e0:	80 e5       	ldi	r24, 0x50	; 80
			break;
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <set_fan_speed+0x4a>
			case 'D':
			pwm_value = 30; // Custom speed 30 (12%)
 1e4:	8e e1       	ldi	r24, 0x1E	; 30
			break;
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <set_fan_speed+0x4a>
		{
			case '0':
			pwm_value = 0; // Turn off the fan
			break;
			case '1':
			pwm_value = 25; // Fan speed 25 (10%)
 1e8:	89 e1       	ldi	r24, 0x19	; 25
			default:
			pwm_value = 0; // Turn off the fan for any other key
			break;
		}

		OCR2 = pwm_value; // Update OCR2 for PWM output
 1ea:	82 bd       	out	0x22, r24	; 34
 1ec:	08 95       	ret

000001ee <main>:
char read_keypad(void);
void set_fan_speed(char keypad_input);

int main(void)
{
	DDRA = 0b00001111; // Rows are outputs, Columns are inputs
 1ee:	8f e0       	ldi	r24, 0x0F	; 15
 1f0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000;
 1f2:	14 ba       	out	0x14, r1	; 20
	DDRE = 0xFF;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	86 b9       	out	0x06, r24	; 6
	DDRB = 0b11101111; // PB0 = clock pb1 = ocr pb2 = ale pb3 = start pb4 = eoc, PB7 = PWM output
 1f8:	9f ee       	ldi	r25, 0xEF	; 239
 1fa:	97 bb       	out	0x17, r25	; 23
	DDRD = 0xFF;       // LED display
 1fc:	81 bb       	out	0x11, r24	; 17

	initialize_pwm();
 1fe:	0e 94 63 00 	call	0xc6	; 0xc6 <initialize_pwm>

	while (1)
	{
		char keypad_input = read_keypad();
 202:	0e 94 6c 00 	call	0xd8	; 0xd8 <read_keypad>
		set_fan_speed(keypad_input);
 206:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <set_fan_speed>
 20a:	fb cf       	rjmp	.-10     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>

0000020c <__tablejump2__>:
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	05 90       	lpm	r0, Z+
 212:	f4 91       	lpm	r31, Z
 214:	e0 2d       	mov	r30, r0
 216:	09 94       	ijmp

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
